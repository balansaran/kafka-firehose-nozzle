// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: ./vendor/github.com/cloudfoundry/sonde-go/events/envelope.pb.go
// DO NOT EDIT!

package events

import (
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *Envelope) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *Envelope) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.Origin != nil {
		if true {
			buf.WriteString(`"origin":`)
			fflib.WriteJsonString(buf, string(*mj.Origin))
			buf.WriteByte(',')
		}
	}
	if mj.EventType != nil {
		if true {
			buf.WriteString(`"eventType":`)
			fflib.FormatBits2(buf, uint64(*mj.EventType), 10, *mj.EventType < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Timestamp != nil {
		if true {
			buf.WriteString(`"timestamp":`)
			fflib.FormatBits2(buf, uint64(*mj.Timestamp), 10, *mj.Timestamp < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Deployment != nil {
		if true {
			buf.WriteString(`"deployment":`)
			fflib.WriteJsonString(buf, string(*mj.Deployment))
			buf.WriteByte(',')
		}
	}
	if mj.Job != nil {
		if true {
			buf.WriteString(`"job":`)
			fflib.WriteJsonString(buf, string(*mj.Job))
			buf.WriteByte(',')
		}
	}
	if mj.Index != nil {
		if true {
			buf.WriteString(`"index":`)
			fflib.WriteJsonString(buf, string(*mj.Index))
			buf.WriteByte(',')
		}
	}
	if mj.Ip != nil {
		if true {
			buf.WriteString(`"ip":`)
			fflib.WriteJsonString(buf, string(*mj.Ip))
			buf.WriteByte(',')
		}
	}
	if mj.HttpStart != nil {
		if true {
			buf.WriteString(`"httpStart":`)

			{

				err = mj.HttpStart.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.HttpStop != nil {
		if true {
			buf.WriteString(`"httpStop":`)

			{

				err = mj.HttpStop.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.HttpStartStop != nil {
		if true {
			buf.WriteString(`"httpStartStop":`)

			{

				err = mj.HttpStartStop.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.LogMessage != nil {
		if true {
			buf.WriteString(`"logMessage":`)

			{

				err = mj.LogMessage.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.ValueMetric != nil {
		if true {
			buf.WriteString(`"valueMetric":`)

			{

				err = mj.ValueMetric.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.CounterEvent != nil {
		if true {
			buf.WriteString(`"counterEvent":`)

			{

				err = mj.CounterEvent.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.Error != nil {
		if true {
			buf.WriteString(`"error":`)

			{

				err = mj.Error.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.ContainerMetric != nil {
		if true {
			buf.WriteString(`"containerMetric":`)

			{

				err = mj.ContainerMetric.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}
