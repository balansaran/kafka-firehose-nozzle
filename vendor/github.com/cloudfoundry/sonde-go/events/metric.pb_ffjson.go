// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: ./vendor/github.com/cloudfoundry/sonde-go/events/metric.pb.go
// DO NOT EDIT!

package events

import (
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *ContainerMetric) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *ContainerMetric) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.ApplicationId != nil {
		if true {
			buf.WriteString(`"applicationId":`)
			fflib.WriteJsonString(buf, string(*mj.ApplicationId))
			buf.WriteByte(',')
		}
	}
	if mj.InstanceIndex != nil {
		if true {
			buf.WriteString(`"instanceIndex":`)
			fflib.FormatBits2(buf, uint64(*mj.InstanceIndex), 10, *mj.InstanceIndex < 0)
			buf.WriteByte(',')
		}
	}
	if mj.CpuPercentage != nil {
		if true {
			buf.WriteString(`"cpuPercentage":`)
			fflib.AppendFloat(buf, float64(*mj.CpuPercentage), 'g', -1, 64)
			buf.WriteByte(',')
		}
	}
	if mj.MemoryBytes != nil {
		if true {
			buf.WriteString(`"memoryBytes":`)
			fflib.FormatBits2(buf, uint64(*mj.MemoryBytes), 10, false)
			buf.WriteByte(',')
		}
	}
	if mj.DiskBytes != nil {
		if true {
			buf.WriteString(`"diskBytes":`)
			fflib.FormatBits2(buf, uint64(*mj.DiskBytes), 10, false)
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

func (mj *CounterEvent) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *CounterEvent) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.Name != nil {
		if true {
			buf.WriteString(`"name":`)
			fflib.WriteJsonString(buf, string(*mj.Name))
			buf.WriteByte(',')
		}
	}
	if mj.Delta != nil {
		if true {
			buf.WriteString(`"delta":`)
			fflib.FormatBits2(buf, uint64(*mj.Delta), 10, false)
			buf.WriteByte(',')
		}
	}
	if mj.Total != nil {
		if true {
			buf.WriteString(`"total":`)
			fflib.FormatBits2(buf, uint64(*mj.Total), 10, false)
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}

func (mj *ValueMetric) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *ValueMetric) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.Name != nil {
		if true {
			buf.WriteString(`"name":`)
			fflib.WriteJsonString(buf, string(*mj.Name))
			buf.WriteByte(',')
		}
	}
	if mj.Value != nil {
		if true {
			buf.WriteString(`"value":`)
			fflib.AppendFloat(buf, float64(*mj.Value), 'g', -1, 64)
			buf.WriteByte(',')
		}
	}
	if mj.Unit != nil {
		if true {
			buf.WriteString(`"unit":`)
			fflib.WriteJsonString(buf, string(*mj.Unit))
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}
