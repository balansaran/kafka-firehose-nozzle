// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: ./vendor/github.com/cloudfoundry/sonde-go/events/http.pb.go
// DO NOT EDIT!

package events

import (
	fflib "github.com/pquerna/ffjson/fflib/v1"
)

func (mj *HttpStartStop) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *HttpStartStop) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if mj.StartTimestamp != nil {
		if true {
			buf.WriteString(`"startTimestamp":`)
			fflib.FormatBits2(buf, uint64(*mj.StartTimestamp), 10, *mj.StartTimestamp < 0)
			buf.WriteByte(',')
		}
	}
	if mj.StopTimestamp != nil {
		if true {
			buf.WriteString(`"stopTimestamp":`)
			fflib.FormatBits2(buf, uint64(*mj.StopTimestamp), 10, *mj.StopTimestamp < 0)
			buf.WriteByte(',')
		}
	}
	if mj.RequestId != nil {
		if true {
			buf.WriteString(`"requestId":`)

			{

				err = mj.RequestId.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.PeerType != nil {
		if true {
			buf.WriteString(`"peerType":`)
			fflib.FormatBits2(buf, uint64(*mj.PeerType), 10, *mj.PeerType < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Method != nil {
		if true {
			buf.WriteString(`"method":`)
			fflib.FormatBits2(buf, uint64(*mj.Method), 10, *mj.Method < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Uri != nil {
		if true {
			buf.WriteString(`"uri":`)
			fflib.WriteJsonString(buf, string(*mj.Uri))
			buf.WriteByte(',')
		}
	}
	if mj.RemoteAddress != nil {
		if true {
			buf.WriteString(`"remoteAddress":`)
			fflib.WriteJsonString(buf, string(*mj.RemoteAddress))
			buf.WriteByte(',')
		}
	}
	if mj.UserAgent != nil {
		if true {
			buf.WriteString(`"userAgent":`)
			fflib.WriteJsonString(buf, string(*mj.UserAgent))
			buf.WriteByte(',')
		}
	}
	if mj.StatusCode != nil {
		if true {
			buf.WriteString(`"statusCode":`)
			fflib.FormatBits2(buf, uint64(*mj.StatusCode), 10, *mj.StatusCode < 0)
			buf.WriteByte(',')
		}
	}
	if mj.ContentLength != nil {
		if true {
			buf.WriteString(`"contentLength":`)
			fflib.FormatBits2(buf, uint64(*mj.ContentLength), 10, *mj.ContentLength < 0)
			buf.WriteByte(',')
		}
	}
	if mj.ApplicationId != nil {
		if true {
			buf.WriteString(`"applicationId":`)

			{

				err = mj.ApplicationId.MarshalJSONBuf(buf)
				if err != nil {
					return err
				}

			}
			buf.WriteByte(',')
		}
	}
	if mj.InstanceIndex != nil {
		if true {
			buf.WriteString(`"instanceIndex":`)
			fflib.FormatBits2(buf, uint64(*mj.InstanceIndex), 10, *mj.InstanceIndex < 0)
			buf.WriteByte(',')
		}
	}
	if mj.InstanceId != nil {
		if true {
			buf.WriteString(`"instanceId":`)
			fflib.WriteJsonString(buf, string(*mj.InstanceId))
			buf.WriteByte(',')
		}
	}
	if len(mj.Forwarded) != 0 {
		buf.WriteString(`"forwarded":`)
		if mj.Forwarded != nil {
			buf.WriteString(`[`)
			for i, v := range mj.Forwarded {
				if i != 0 {
					buf.WriteString(`,`)
				}
				fflib.WriteJsonString(buf, string(v))
			}
			buf.WriteString(`]`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}
