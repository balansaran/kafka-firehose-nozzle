// DO NOT EDIT!
// Code generated by ffjson <https://github.com/pquerna/ffjson>
// source: ./vendor/github.com/cloudfoundry/sonde-go/events/log.pb.go
// DO NOT EDIT!

package events

import (
	"encoding/base64"
	fflib "github.com/pquerna/ffjson/fflib/v1"
	"reflect"
)

func (mj *LogMessage) MarshalJSON() ([]byte, error) {
	var buf fflib.Buffer
	if mj == nil {
		buf.WriteString("null")
		return buf.Bytes(), nil
	}
	err := mj.MarshalJSONBuf(&buf)
	if err != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}
func (mj *LogMessage) MarshalJSONBuf(buf fflib.EncodingBuffer) error {
	if mj == nil {
		buf.WriteString("null")
		return nil
	}
	var err error
	var obj []byte
	_ = obj
	_ = err
	buf.WriteString(`{ `)
	if len(mj.Message) != 0 {
		buf.WriteString(`"message":`)
		if mj.Message != nil {
			buf.WriteString(`"`)
			{
				enc := base64.NewEncoder(base64.StdEncoding, buf)
				enc.Write(reflect.Indirect(reflect.ValueOf(mj.Message)).Bytes())
				enc.Close()
			}
			buf.WriteString(`"`)
		} else {
			buf.WriteString(`null`)
		}
		buf.WriteByte(',')
	}
	if mj.MessageType != nil {
		if true {
			buf.WriteString(`"message_type":`)
			fflib.FormatBits2(buf, uint64(*mj.MessageType), 10, *mj.MessageType < 0)
			buf.WriteByte(',')
		}
	}
	if mj.Timestamp != nil {
		if true {
			buf.WriteString(`"timestamp":`)
			fflib.FormatBits2(buf, uint64(*mj.Timestamp), 10, *mj.Timestamp < 0)
			buf.WriteByte(',')
		}
	}
	if mj.AppId != nil {
		if true {
			buf.WriteString(`"app_id":`)
			fflib.WriteJsonString(buf, string(*mj.AppId))
			buf.WriteByte(',')
		}
	}
	if mj.SourceType != nil {
		if true {
			buf.WriteString(`"source_type":`)
			fflib.WriteJsonString(buf, string(*mj.SourceType))
			buf.WriteByte(',')
		}
	}
	if mj.SourceInstance != nil {
		if true {
			buf.WriteString(`"source_instance":`)
			fflib.WriteJsonString(buf, string(*mj.SourceInstance))
			buf.WriteByte(',')
		}
	}
	buf.Rewind(1)
	buf.WriteByte('}')
	return nil
}
